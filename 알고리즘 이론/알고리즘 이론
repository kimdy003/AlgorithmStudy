그리디 알고리즘
    -현재 상황에서 지금 당장 좋은 것만 고르는 방법
    -> 매 순간 가장 좋아 보이는 것만 선택하고, 현재의 선택이 나중에 미칠 영향에
        미칠 영향에 대해서는 고려하지 않는다
    ex) 거스름돈 문제 -> 가장 큰 화페 단위부터 돈을 거슬러 주기

 그리디 알고리즘의 정당성
    -탐욕적으로 문제에 접근 시 정확한 답을 찾을 수 있다는 보당이 있을 때는 매우 효과적이고 직관적
    -문제의 해법을 찾았을 때는 그 해법이 정당한지 검토

    ex) 거스름돈 문제
        -검토: 가지고 있는 동전 중 가장 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 
                동전들을 종합해 다른 해가 나올 수 없다.

 결론: 대부분의 그리디 알고리즘 문제에서는 이처럼 문제 풀이를 위한 최소한의 아이디어를
        떠올리고 이것을 정당한지 검토할 수 있어야한다.

===============================================================================================

구현 
    -머리속에 있는 알고리즘을 코드로 바꾸는 과정
    -모든 범위의 코딩 테스트 문제 유형을 포함하는 개념
    1. 완전 탐색
        -모든 경우의 수를 주저 없이 다 계산 하는 해결 방법

    2. 시뮬레이션
        -문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행

===============================================================================================

정렬 알고리즘
    1. 선택정렬
    2. 삽입정렬
    3. 퀵 정렬

===============================================================================================

탐색 알고리즘
    1. 순차 탐색
        데이터를 하나씩 차례대로 확인

    2. 이진 탐색
        -정렬이 되어있는 데이터 상에서 가능
        -찾으려는 데이터와 중간점 위치에 있는 데이터를 반복적으로 비교

===============================================================================================

최단 경로 알고리즘
    1. 다익스트라 최단 경로 알고리즘
    2. 플로이드 워샬 알고리즘

===============================================================================================

그래프 알고리즘
    1.Union-Find 알고리즘(= 서로소 집합 알고리즘)

    2. 스패닝 트리(= 신장 트리)
        (1) 크루스칼 알고리즘
        
    3. 위상 정렬

---------------------------
트리 알고리즘
    1. TRIE 알고리즘
        -문자열을 정렬해주는 알고리즘
    
    2. 세그먼트 트리

===============================================================================================

기타 알고리즘
    1. 투 포인트
    2. 구간 합 계산 알고리즘




